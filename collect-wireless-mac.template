#!rsc by RouterOS
# RouterOS script: collect-wireless-mac%TEMPL%
# Copyright (c) 2013-2021 Christian Hesse <mail@eworm.de>
# https://git.eworm.de/cgit/routeros-scripts/about/COPYING.md
#
# collect wireless mac adresses in access list
# https://git.eworm.de/cgit/routeros-scripts/about/doc/collect-wireless-mac.md
#
# !! This is just a template! Replace '%PATH%' with 'caps-man'
# !! or 'interface wireless'!

:global Identity;

:global GetMacVendor;
:global LogPrintExit;
:global ScriptLock;
:global SendNotification;
:global SymbolForNotification;

$ScriptLock "collect-wireless-mac%TEMPL%";

:if ([ :len [ / %PATH% access-list find where comment="--- collected above ---" disabled ] ] = 0) do={
  / %PATH% access-list add comment="--- collected above ---" disabled=yes;
  $LogPrintExit warning "Added disabled access-list entry with comment '--- collected above ---'." false;
}
:local PlaceBefore ([ / %PATH% access-list find where comment="--- collected above ---" disabled ]->0);

:foreach RegTbl in=[ / %PATH% registration-table find ] do={
  :local Mac [ / %PATH% registration-table get $RegTbl mac-address ];
  :local AccessList ([ / %PATH% access-list find where mac-address=$Mac ]->0);
  :if ([ :len $AccessList ] = 0) do={
    :local Address "no dhcp lease";
    :local DnsName "no dhcp lease";
    :local HostName "no dhcp lease";
    :local Lease ([ / ip dhcp-server lease find where mac-address=$Mac dynamic=yes status=bound ]->0);
    :if ([ :len $Lease ] > 0) do={
      :set Address [ / ip dhcp-server lease get $Lease address ];
      :set HostName [ / ip dhcp-server lease get $Lease host-name ];
      :if ([ :len $HostName ] = 0) do={
        :set HostName "no hostname";
      }
      :set DnsName [ / ip dns static get ([ find where address=$Address ]->0) name ];
      :if ([ :len $DnsName ] = 0) do={
        :set DnsName "no dns name";
      }
    }
    :local RegEntry [ / %PATH% registration-table find where mac-address=$Mac ];
    :local Interface [ / %PATH% registration-table get $RegEntry interface ];
    :local Ssid [ / caps-man registration-table get $RegEntry ssid ];
    :local Ssid [ / interface wireless get [ find where name=$Interface ] ssid ];
    :local DateTime ([ / system clock get date ] . " " . [ / system clock get time ]);
    :local Vendor [ $GetMacVendor $Mac ];
    :local Message ("unknown MAC address " . $Mac . " (" . $Vendor . ", " . $HostName . ") " . \
      "first seen on " . $DateTime . " connected to SSID " . $Ssid . ", interface " . $Interface);
    $LogPrintExit info $Message false;
    / %PATH% access-list add place-before=$PlaceBefore comment=$Message mac-address=$Mac disabled=yes;
    $SendNotification ([ $SymbolForNotification "mobile-phone" ] . $Mac . " connected to " . $Ssid) \
      ("A device with unknown MAC address connected to " . $Ssid . " on " . $Identity . ".\n\n" . \
        "Controller: " . $Identity . "\n" . \
        "Interface:  " . $Interface . "\n" . \
        "SSID:       " . $Ssid . "\n" . \
        "MAC:        " . $Mac . "\n" . \
        "Vendor:     " . $Vendor . "\n" . \
        "Hostname:   " . $HostName . "\n" . \
        "Address:    " . $Address . "\n" . \
        "DNS name:   " . $DnsName . "\n" . \
        "Date:       " . $DateTime);
  } else={
    $LogPrintExit debug ("MAC address " . $Mac . " already known: " . \
      [ / %PATH% access-list get $AccessList comment ]) false;
  }
}
